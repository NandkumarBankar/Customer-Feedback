pipeline {
    agent any


  environment {
        NODE_HOME = 'C:\\Program Files\\nodejs'  // Specify the path to Node.js on Windows
        NPM_CACHE = "%USERPROFILE%\\.npm"         // NPM cache location, modify as needed
        WORKSPACE_PATH = 'C:\\Users\\ADMIN\\.jenkins\\workspace\\Web APP\\app'  // Set path to the specific folder
    }

 parameters {
        string(name: 'PORT', defaultValue: '8090', description: 'Port to serve the app')
    }

    stages {

        // stage('Checkout') {
        //     steps {
        //         git branch: 'main', url: 'https://github.com/NandkumarBankar/Customer-Feedback.git'
        //     }
        // }

    stage('Checkout') {
    steps {
        script {
            // Perform the checkout with path filtering
            checkout([$class: 'GitSCM', 
                      branches: [[name: 'main']],
                      userRemoteConfigs: [[url: 'https://github.com/NandkumarBankar/Customer-Feedback.git']],
                      extensions: [[$class: 'PathRestriction', excludedRegions: '', includedRegions: 'app/*']]
            ])
        }
    }
}


        stage('Install Dependencies') {
            steps {
                script {
                     // Change directory to the correct folder
                    dir("${WORKSPACE_PATH}") {
                    echo 'Installing Node.js and Angular dependencies...'

                    // Install Node.js and Angular CLI on Windows
                    // Install Node.js (If it's not installed globally, we can use nvm or a manual install script)
                    bat 'npm install -g @angular/cli' // Install Angular CLI globally
                    bat 'npm install'  // Install project dependencies from package.json

                    // Check if http-server is installed globally and install if it's missing
                    def httpServerInstalled = bat(script: 'npm list -g http-server', returnStatus: true) == 0
                    if (!httpServerInstalled) {
                        echo "http-server is not installed, installing..."  
                        // install server for run file using // start http-server app -p 8065 // by using this script
                        bat 'npm install -g http-server'
                    } else {
                        echo "http-server is already installed."
                    }
                }
              }
            }
        }

//  This runs a Windows batch command. Specifically, it runs the npm run lint command, which triggers the linting process defined in the project's package.json file (usually for JavaScript/TypeScript code quality checks).
// In summary, this stage runs a linting process to check the code for issues and ensure code quality before moving to the next stages in the pipeline.
     
     //due to multiple error
        // stage('Run Linter') {
        //     steps {
        //         script {
        //             // Run the batch file to execute linting
        //             bat 'npm run lint'  // Runs linting in Windows batch file
        //         }
        //     }
        // }
    //  stage('Run Unit Tests') {
    //         steps {
    //             script {
    //                 // Run the batch file to execute unit tests
    //                 bat 'npm run test -- --watch=false --browsers=ChromeHeadless'  // Run tests in headless mode
    //             }
    //         }
    //     }

        stage('Build Angular Application'){
            steps{
                script{
                     // Change directory to the correct folder
                    dir("${WORKSPACE_PATH}") {
                    bat 'npm run build'
                    }
                }
            }
        }
  stage('Check and Terminate Process') {
            steps {
                script {
                    def port = params.PORT ?: 8090

                    echo "Using port: ${port}"

                    // Check if the port is already in use by running netstat
                    def isPortInUse = (bat(script: """
                        netstat -ano | findstr :${port}
                    """, returnStatus: true) == 0) // Returns true when port is in use, false if free


                    echo "Is Port In Use : ${isPortInUse}"
                    // If the port is in use, find and terminate the process
                    if (isPortInUse) {
                        echo "Port ${port} is in use. Finding and terminating the process..."

                        // Run netstat to find the PID associated with the port
                        def pid = bat(script: """
                            @echo off
                            for /f "tokens=5" %%a in ('netstat -ano ^| findstr :${port}') do echo %%a
                        """, returnStdout: true).trim()

                        echo "Netstat output: ${pid}"

                        // Handle case when no PID is found (empty string from netstat)
                        if (pid) {
                            // Extract and validate the PID
                            def validPid = pid.tokenize("\n").last().trim()
                            echo "Identified PID: ${validPid}"

                            if (validPid.isInteger() && validPid.toInteger() > 0) {
                                echo "Terminating process with PID: ${validPid}"
                                bat "taskkill /F /PID ${validPid}"
                            } else {
                                echo "No valid process found on port ${port}."
                            }
                        } else {
                            echo "No process found on port ${port}, continuing with deployment."
                        }
                    } else {
                        echo "Port ${port} is free, skipping PID lookup and termination."
                    }
                }
            }
        }
        stage('Deploy Angular Project') {
            steps {
                script {
                     def buildPath = "${WORKSPACE}/dist/app" 
                     // Change directory to the correct folder
                    dir("${buildPath}") {
                    echo 'Starting Angular project using ng serve...'

                  bat "http-server browser -p ${port}"
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Cleaning up after execution"
        }
        success {
            echo "Build and deployment successful!"
        }
        failure {
            echo "Build or deployment failed!"
        }
    }
}
