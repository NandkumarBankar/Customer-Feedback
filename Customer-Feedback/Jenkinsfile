pipeline {
    agent any

tools {
        maven 'Maven_3.9.9'  // Ensure this matches the configured Maven name
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/NandkumarBankar/Customer-Feedback.git'
            }
        }

        stage('Build : Customer-Feedback ') {
            steps {
                dir('Customer-Feedback') {
                    bat 'mvn clean package'
                }
            }
        }

        stage('Test Project : Customer-Feedback') {
            steps {
                dir('Customer-Feedback') {
                    bat 'mvn test'
                }
            }
        }

      stage('Check and Terminate Process') {
    steps {
        script {
            // Reading port from the application.yml file
            def port = readFile('Customer-Feedback/src/main/resources/application.yml')
                .find(/server\.port: (\d+)/) { match, p -> return p } ?: '8081'

            echo "Using port: ${port}"

            // Check if the port is already in use by running netstat
            def isPortInUse = bat(script: """
                netstat -ano ^| findstr :${port}
            """, returnStatus: true) == 0  // Returns 0 if port is in use

            // Skip PID finding and termination if port is free

            echo "PORT Status : ${isPortInUse}"

            if (isPortInUse) {
                echo "Port ${port} is in use. Finding and terminating the process..."

                // PowerShell command to find PID associated with the port
                def pid = bat(script: """
                    powershell -Command "
                        \$pid = (Get-NetTCPConnection -LocalPort ${port} | Select-Object -First 1).OwningProcess;
                        if (\$pid) { Write-Output \$pid } else { exit 1 }
                    "
                """, returnStdout: true).trim()

                echo "PowerShell output: ${pid}"

                if (pid) {
                    echo "Found PID: ${pid}, terminating the process..."
                    // Kill the process using the PID
                    bat "powershell Stop-Process -Id ${pid} -Force"
                } else {
                    echo "No valid process found on port ${port}."
                }
            } else {
                echo "Port ${port} is free, skipping PID lookup and termination."
            }
        }
    }
}


        stage('Deploy Project : Customer-Feedback') {
            steps {
                dir('Customer-Feedback') {
                    // Run the new JAR file in the background
                    bat 'java -jar target/Customer-Feedback.jar'
                       echo "Application Started Successfully"
                }
            }
        }
    }

    post {
        always {
            echo "Cleaning up after execution"
        }
        success {
            echo "Build and deployment successful!"
        }
        failure {
            echo "Build or deployment failed!"
        }
    }
}
