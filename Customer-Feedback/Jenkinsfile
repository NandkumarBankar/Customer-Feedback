pipeline {
    agent any

tools {
        maven 'Maven_3.9.9'  // Ensure this matches the configured Maven name
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/NandkumarBankar/Customer-Feedback.git'
            }
        }

        stage('Build : Customer-Feedback ') {
            steps {
                dir('Customer-Feedback') {
                    bat 'mvn clean package'
                }
            }
        }

        stage('Test Project : Customer-Feedback') {
            steps {
                dir('Customer-Feedback') {
                    bat 'mvn test'
                }
            }
        }

        stage('Check and Terminate Process') {
            steps {
                script {
                    // Reading port from the application.yml file
                    def port = readFile('Customer-Feedback/src/main/resources/application.yml')
                        .find(/server\.port: (\d+)/) { match, p -> return p } ?: '8081'

                    echo "Using port: ${port}"

                    // Check if the port is already in use by running netstat
                    def isPortInUse = (bat(script: """
                        netstat -ano | findstr :${port}
                    """, returnStatus: true) == 0) // Returns true when port is in use, false if free


                    echo "Is Port In Use : ${isPortInUse}"
                    // If the port is in use, find and terminate the process
                    if (isPortInUse) {
                        echo "Port ${port} is in use. Finding and terminating the process..."

                        // Run netstat to find the PID associated with the port
                        def pid = bat(script: """
                            @echo off
                            for /f "tokens=5" %%a in ('netstat -ano ^| findstr :${port}') do echo %%a
                        """, returnStdout: true).trim()

                        echo "Netstat output: ${pid}"

                        // Handle case when no PID is found (empty string from netstat)
                        if (pid) {
                            // Extract and validate the PID
                            def validPid = pid.tokenize("\n").last().trim()
                            echo "Identified PID: ${validPid}"

                            if (validPid.isInteger() && validPid.toInteger() > 0) {
                                echo "Terminating process with PID: ${validPid}"
                                bat "taskkill /F /PID ${validPid}"
                            } else {
                                echo "No valid process found on port ${port}."
                            }
                        } else {
                            echo "No process found on port ${port}, continuing with deployment."
                        }
                    } else {
                        echo "Port ${port} is free, skipping PID lookup and termination."
                    }
                }
            }
        }


        stage('Deploy Project : Customer-Feedback') {
            steps {
                dir('Customer-Feedback') {
                    // Run the new JAR file in the background
                    bat 'start java -jar target/Customer-Feedback.jar'
                       echo "Application Started Successfully"
                }
            }
        }
    }

    post {
        always {
            echo "Cleaning up after execution"
        }
        success {
            echo "Build and deployment successful!"
        }
        failure {
            echo "Build or deployment failed!"
        }
    }
}
